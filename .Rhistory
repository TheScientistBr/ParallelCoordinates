files2Test <- loadTestFile(classe)
corData <- read.csv(paste0("./correlation/",classe,".cor"),stringsAsFactors = FALSE)
count <- 0
i<-1
which(corData$Filename == files$V1[i])
myFile <- which(corData$Filename == files$V1[i])
files$V1[i]
files<-as.data.frame(x = list.files(paste0(myClass)))
myFile <- which(corData$Filename == files2Test$V1[i])
files2Test$V1[i]
class <-2
files<-as.data.frame(x = list.files(paste0(myClass)))
if(class == FALSE) {
names(files)<-"Choose one Class"
return(files)
}
if(is.numeric(class)) {
classe<-as.character(files[[1]])[class]
}
print(as.data.frame(classe))
files2Test <- loadTestFile(classe)
if(file.exists(paste0("correlation/",classe,".cor")))
corData <- read.csv(paste0("./correlation/",classe,".cor"),stringsAsFactors = FALSE)
else
print(paste0("File ","correlation/",classe,".cor"," not found"))
count <- 0
files2Test$V1[i]
myFile <- which(corData$Filename == files2Test$V1[i])
if(!myFile)
!myFile
corData[i,]$Correlation
if(corData[myFile,]$Correlation >= corMin) {
if(!dir.exists(paste0(classAtractors,"/",classe)))
dir.create(paste0(classAtractors,"/",classe))
file.copy(from = paste0("./index/", corData[i,]$Filename, ".idx"),
to = paste0(classAtractors,"/",classe),
overwrite = TRUE)
}
corData[myFile,]$Correlation
corData[myFile,]
files2Test$V1[i]
source('D:/Data Science/r/aTribunaDev/classifying.R')
createAtractors(class = 2,maxFiles = 5)
if(class == FALSE) {
names(files)<-"Choose one Class"
return(files)
}
showCorrelation(2,5)
source('D:/Data Science/r/aTribunaDev/iClassFile.R')
showCorrelation(2,5)
source('D:/Data Science/r/aTribunaDev/iClassFile.R')
showCorrelation(2,5)
showCorrelation(2,10)
createAtractors(class = 2,maxFiles = 10)
source('D:/Data Science/r/aTribunaDev/classifying.R')
createAtractors(class = 2,maxFiles = 10)
source('D:/Data Science/r/aTribunaDev/classifying.R')
createAtractors(class = 2,maxFiles = 10)
source('D:/Data Science/r/aTribunaDev/classifying.R')
source('D:/Data Science/r/aTribunaDev/classifying.R')
createAtractors(class = 2,maxFiles = 10)
source('D:/Data Science/r/aTribunaDev/classifying.R')
createAtractors(class = 2,maxFiles = 10)
createAtractors(class = 2,maxFiles = 10)
source('D:/Data Science/r/aTribunaDev/classifying.R')
createAtractors(class = 2,maxFiles = 10)
source('D:/Data Science/r/aTribunaDev/classifying.R')
createAtractors(class = 2,maxFiles = 10)
createAtractors(class = 2,maxFiles = 5)
createAtractors(class = 2,maxFiles = 2)
length(corData$Filename
)
i<-312
files2Test$V1[i]
i<-311
files2Test$V1[i]
i<-310
files2Test$V1[i]
files2Test$V1[309]
files2Test$V1[300]
files2Test$V1[200]
length(files2Test$V1)
source('D:/Data Science/r/aTribunaDev/classifying.R')
createAtractors(class = 2,maxFiles = 10)
source('D:/Data Science/r/aTribunaDev/classifying.R')
createAtractors(class = 2,maxFiles = 10)
createAtractors(class = 3,maxFiles = 10)
createAtractors(class = 4,maxFiles = 10)
createAtractors(class = 5,maxFiles = 10)
createAtractors(class = 6,maxFiles = 10)
createAtractors(class = 7,maxFiles = 10)
createAtractors(class = 8,maxFiles = 10)
source("loadConfig.R")
files<-as.data.frame(x = list.files(paste0(myClass)))
if(class == FALSE) {
names(files)<-"Choose one Class"
return(files)
}
if(is.numeric(class)) {
classe<-as.character(files[[1]])[class]
}
print(as.data.frame(classe))
class <- 2
files<-as.data.frame(x = list.files(paste0(myClass)))
if(class == FALSE) {
names(files)<-"Choose one Class"
return(files)
}
if(is.numeric(class)) {
classe<-as.character(files[[1]])[class]
}
print(as.data.frame(classe))
lfiles <- list.dirs(paste0(classAtractors,"/",classe))
lfiles
lfiles <- list.dirs(paste0(classAtractors,"/",classe,"/*"))
lfiles
lfiles <- list.files(paste0(classAtractors,"/",classe,"/*"))
lfiles
lfiles <- list.files(paste0(classAtractors,"/",classe))
lfiles
class <- "cid"
classe <- class
if(is.numeric(class)) {
classe<-as.character(files[[1]])[class]
}
print(as.data.frame(classe))
lfiles <- list.files(paste0(classAtractors,"/",classe))
lfile
lfiles
if(file.exists(paste0("correlation/",classe,".cor")))
corData <- read.csv(paste0("./correlation/",classe,".cor"),
stringsAsFactors = FALSE)
myFile <- which(corData$Filename == files2Test$V1[i])
sapply(1:length(files2Test$V1), function(i) {
myFile <- which(corData$Filename == files2Test$V1[i])
})
files2Test <- loadTestFile(classe)
files2Test <- loadTestFile(classe)
source("iClassFile.R")
files2Test <- loadTestFile(classe)
sapply(1:length(files2Test$V1), function(i) {
myFile <- which(corData$Filename == files2Test$V1[i])
})
lAtractors <- sapply(1:length(files2Test$V1), function(i) {
myFile <- which(corData$Filename == files2Test$V1[i])
})
corData[lAtractors,]
lfiles <- list.files(paste0(classAtractors,"/",classe))
lfiles <- list.files(paste0(classAtractors,"/",classe),full.names = TRUE)
lfiles <- list.files(paste0(classAtractors,"/",classe),full.names = TRUE)
lfiles <- list.files(paste0(classAtractors,"/",classe))
lfiles[1]
substring(lfiles[1],last = length(lfiles[1]))
substring(lfiles[1],first = length(lfiles[1]) - 4,last = length(lfiles[1]))
substring(lfiles[1],first = length(lfiles[1]) - 5,last = length(lfiles[1]))
substring(lfiles[1],first = length(lfiles[1]) - 5,last = length(lfiles[1]))
length(lfiles[1])
length(lfiles$[1])
length(lfiles)
substring(lfiles[1],first = length(lfiles) - 5,last = length(lfiles))
substring(lfiles[1],first = length(lfiles) - 4,last = length(lfiles))
lfiles
lfiles[1]
length(lfiles[1])
nchar(lfiles[1])
substring(lfiles[1],first = nchar(lfiles) - 4,last = nchar(lfiles))
substring(lfiles[1],first = nchar(lfiles[1]) - 4,last = nchar(lfiles[1]))
substring(lfiles[1],first = nchar(lfiles[1]) - 3,last = nchar(lfiles[1]))
substring(lfiles[1],first = 1,last = nchar(lfiles[1])-4)
substring(lfiles,first = 1,last = nchar(lfiles)-4)
lfiles <- list.files(paste0(classAtractors,"/",classe))
lfiles <- substring(lfiles,first = 1,last = nchar(lfiles)-4)
lfiles
length(lfiles)
lAtractors <- sapply(1:length(lfiles), function(i) {
myFile <- which(corData$Filename == lfiles[i])
})
myFile <- which(corData$Filename == lfiles[i])
myF
lAtractors
print(corData[lAtractors])
print(corData[lAtractors,])
print(corData[lAtractors,2:3])
source('D:/Data Science/r/aTribunaDev/classifying.R')
source('D:/Data Science/r/aTribunaDev/classifying.R')
source('D:/Data Science/r/aTribunaDev/classifying.R')
classifying("cid")
source('D:/Data Science/r/aTribunaDev/classifying.R')
source('D:/Data Science/r/aTribunaDev/classifying.R')
classifying(class = "cid",maxFiles = 10)
source('D:/Data Science/r/aTribunaDev/classifying.R')
classifying(class = "cid",maxFiles = 10)
source('D:/Data Science/r/aTribunaDev/classifying.R')
classifying(class = "cid",maxFiles = 10)
source('D:/Data Science/r/aTribunaDev/classifying.R')
classifying(class = "cid",maxFiles = 10,minCor = .5)
classifying(class = "cid",maxFiles = 10,minCor = .2)
source("loadConfig.R")
class <- "at2"
i1 <-1
i2 <-1
lfile <- as.character(file2test$V1)[1]
files<-as.data.frame(x = list.files(paste0(myClass)))
if(class == FALSE) {
names(files)<-"Choose one Class"
return(files)
}
ifelse(is.numeric(class),
classe <-as.character(files[[1]])[class],
classe <- class)
print(as.data.frame(classe))
if(!dir.exists(classAtractors))
dir.create(classAtractors)
if(!dir.exists(trashClassified))
dir.create(trashClassified)
if(!dir.exists(destClassified))
dir.create(destClassified)
if(!dir.exists(source2Classify))
return("ERRO - there is no source to classify")
file2test <- read.csv(paste0("./files2test/",classe,".tst"), stringsAsFactors=FALSE)
classAtractor <- sapply(list.files(classAtractors),list)
classAtractor <- sapply(classAtractor[],function(class) {
classAtractor[[class]] <- list.files(paste0(classAtractors,"/",classAtractor[[class]]),
full.names = TRUE)
})
countFiles <- 0
lfile <- as.character(file2test$V1[1])
lfile
doc  <- read.csv(paste0("index/",lfile,".idx"),stringsAsFactors = FALSE, header = FALSE,
col.names = c("term","tfidf"),sep = ";",
encoding = "UTF-8")
mostFreq <- 0
i1 <- 1
i2 <-2
classProc <- names(classAtractor)[i1]
freqCount <- 0
choice <- NULL
for(i2 in 1:length(classAtractor[[classProc]])) {
if(length(classAtractor[[3]]) < 1)
break
if(is.na(classAtractor[[classProc]][i2])) {
printf("ERROR class %d/%d - %s", i1,i2,classAtractor[[classProc]][i2])
}
ni <- read.csv(classAtractor[[classProc]][i2],stringsAsFactors = FALSE,
header = FALSE, col.names = c("term","mean"),
sep = ";", encoding = "UTF-8")
ni$tfidf <- 0
ni$i <- 0
soma<-0
total<-length(ni$term)[1]
for(i  in 1:length(doc$term)[1]) {
ind <- which(ni$term == doc$term[i])
if(length(ni$term[ind])[1] > 0) {
ni$tfidf[ind] <- doc$tfidf[i]
}
}
ni <- subset(ni, tfidf > 0)
ni <- subset(ni, mean > 0)
if(length(ni$term) < 10) {
keyWrite <- FALSE
break
}
ni <- ni[order(ni$mean,decreasing = FALSE),]
ni$i <- 1:length(ni$term)
model1 <- lm(ni$mean ~ ni$i + I(ni$i^2))
model2 <- lm(ni$tfidf ~ ni$i + I(ni$i^2))
corr <- abs(cor(predict(model1),predict(model2)))
if(corr >= minCor) {
freqCount <- freqCount + 1
}
}
mostFreq
freqCount
source('D:/Data Science/r/aTribunaDev/iClassFile.R')
createCorrelation(class = )
createCorrelation(8)
createCorrelation(9)
createCorrelation(10)
createCorrelation(11)
createCorrelation(12)
createCorrelation(13)
saplay(14:21,createCorrelation)
sapplay(14:21,createCorrelation)
saplay(14:21,createCorrelation)
sapplay(14:21,createCorrelation)
sapply(14:21,createCorrelation)
setwd("D:/Data Science/r/aTribunaDev")
source('D:/Data Science/r/aTribunaDev/classifying.R')
createAtractors()
source('D:/Data Science/r/aTribunaDev/classifying.R')
createAtractors()
createAtractors(20)
class <- "tab"
maxFiles <- Inf
source("loadConfig.R")
source("iClassFile.R")
files<-as.data.frame(x = list.files(paste0(myClass)))
if(class == FALSE) {
names(files)<-"Choose one Class"
return(files)
}
if(is.numeric(class)) {
classe<-as.character(files[[1]])[class]
}
print(as.data.frame(classe))
classe <- class
if(is.numeric(class)) {
classe<-as.character(files[[1]])[class]
}
print(as.data.frame(classe))
files2Test <- loadTestFile(classe)
if(file.exists(paste0("correlation/",classe,".cor")))
corData <- read.csv(paste0("./correlation/",classe,".cor"),
stringsAsFactors = FALSE)
else
print(paste0("File ","correlation/",classe,".cor"," not found"))
count <- 0
for(i in 1:length(files2Test$V1)) {
myFile <- which(corData$Filename == files2Test$V1[i])
if(!myFile)
next
if(count > maxFiles)
break
if(corData[myFile,]$Correlation >= corMin) {
count <- count +1
if(!dir.exists(paste0(classAtractors,"/",classe)))
dir.create(paste0(classAtractors,"/",classe))
file.copy(from = paste0("./index/", corData[myFile,]$Filename, ".idx"),
to = paste0(classAtractors,"/",classe),
overwrite = TRUE)
printf("%s %f >",corData[myFile,]$Filename,corData[myFile,]$Correlation)
}
#else
#printf("%s %f X",corData[myFile,]$Filename,corData[myFile,]$Correlation)
}
corData <- read.csv(paste0("./correlation/",classe,".cor"),
stringsAsFactors = FALSE)
class <- "tav"
classe <- class
if(is.numeric(class)) {
classe<-as.character(files[[1]])[class]
}
print(as.data.frame(classe))
lfiles <- list.files(paste0(classAtractors,"/",classe))
lfiles <- substring(lfiles,first = 1,last = nchar(lfiles)-4)
if(file.exists(paste0("correlation/",classe,".cor")))
corData <- read.csv(paste0("./correlation/",classe,".cor"),
stringsAsFactors = FALSE)
lAtractors <- sapply(1:length(lfiles), function(i) {
myFile <- which(corData$Filename == lfiles[i])
})
source("loadConfig.R")
source("iClassFile.R")
files<-as.data.frame(x = list.files(paste0(myClass)))
if(class == FALSE) {
names(files)<-"Choose one Class"
return(files)
}
classe <- class
if(is.numeric(class)) {
classe<-as.character(files[[1]])[class]
}
print(as.data.frame(classe))
files2Test <- loadTestFile(classe)
if(file.exists(paste0("correlation/",classe,".cor")))
corData <- read.csv(paste0("./correlation/",classe,".cor"),
stringsAsFactors = FALSE)
else
print(paste0("File ","correlation/",classe,".cor"," not found"))
count <- 0
for(i in 1:length(files2Test$V1)) {
myFile <- which(corData$Filename == files2Test$V1[i])
if(!myFile)
next
if(count > maxFiles)
break
if(corData[myFile,]$Correlation >= corMin) {
count <- count +1
if(!dir.exists(paste0(classAtractors,"/",classe)))
dir.create(paste0(classAtractors,"/",classe))
file.copy(from = paste0("./index/", corData[myFile,]$Filename, ".idx"),
to = paste0(classAtractors,"/",classe),
overwrite = TRUE)
printf("%s %f >",corData[myFile,]$Filename,corData[myFile,]$Correlation)
}
#else
#printf("%s %f X",corData[myFile,]$Filename,corData[myFile,]$Correlation)
}
minCor <- .95
for(i in 1:length(files2Test$V1)) {
myFile <- which(corData$Filename == files2Test$V1[i])
if(!myFile)
next
if(count > maxFiles)
break
if(corData[myFile,]$Correlation >= corMin) {
count <- count +1
if(!dir.exists(paste0(classAtractors,"/",classe)))
dir.create(paste0(classAtractors,"/",classe))
file.copy(from = paste0("./index/", corData[myFile,]$Filename, ".idx"),
to = paste0(classAtractors,"/",classe),
overwrite = TRUE)
printf("%s %f >",corData[myFile,]$Filename,corData[myFile,]$Correlation)
}
#else
#printf("%s %f X",corData[myFile,]$Filename,corData[myFile,]$Correlation)
}
for(i in 1:length(files2Test$V1)) {
myFile <- which(corData$Filename == files2Test$V1[i])
if(!myFile)
next
if(count > maxFiles)
break
if(corData[myFile,]$Correlation >= minCor) {
count <- count +1
if(!dir.exists(paste0(classAtractors,"/",classe)))
dir.create(paste0(classAtractors,"/",classe))
file.copy(from = paste0("./index/", corData[myFile,]$Filename, ".idx"),
to = paste0(classAtractors,"/",classe),
overwrite = TRUE)
printf("%s %f >",corData[myFile,]$Filename,corData[myFile,]$Correlation)
}
#else
#printf("%s %f X",corData[myFile,]$Filename,corData[myFile,]$Correlation)
}
count
maxFiles <- Inf
minCor <- .95
class <- "tav"
source("loadConfig.R")
files<-as.data.frame(x = list.files(paste0(myClass)))
if(class == FALSE) {
names(files)<-"Choose one Class"
return(files)
}
classe <- class
if(is.numeric(class)) {
classe<-as.character(files[[1]])[class]
}
print(as.data.frame(classe))
files2Test <- loadTestFile(classe)
if(file.exists(paste0("correlation/",classe,".cor")))
length(corData)
if(file.exists(paste0("correlation/",classe,".cor")))
corData <- read.csv(paste0("./correlation/",classe,".cor"),
stringsAsFactors = FALSE)
else
length(corData)
length(corData)[1]
length(corData$Filename)
i <-1
if(i > maxFiles)
break
if(corData[myFile,]$Correlation >= minCor) {
count <- count +1
if(!dir.exists(paste0(classAtractors,"/",classe)))
dir.create(paste0(classAtractors,"/",classe))
file.copy(from = paste0("./index/", corData[myFile,]$Filename, ".idx"),
to = paste0(classAtractors,"/",classe),
overwrite = TRUE)
printf("%s %f >",corData[myFile,]$Filename,corData[myFile,]$Correlation)
}
if(corData[i,]$Correlation >= minCor) {
count <- count +1
if(!dir.exists(paste0(classAtractors,"/",classe)))
dir.create(paste0(classAtractors,"/",classe))
file.copy(from = paste0("./index/", corData[myFile,]$Filename, ".idx"),
to = paste0(classAtractors,"/",classe),
overwrite = TRUE)
printf("%s %f >",corData[myFile,]$Filename,corData[myFile,]$Correlation)
}
count <- 0
if(corData[i,]$Correlation >= minCor) {
count <- count +1
if(!dir.exists(paste0(classAtractors,"/",classe)))
dir.create(paste0(classAtractors,"/",classe))
file.copy(from = paste0("./index/", corData[myFile,]$Filename, ".idx"),
to = paste0(classAtractors,"/",classe),
overwrite = TRUE)
printf("%s %f >",corData[myFile,]$Filename,corData[myFile,]$Correlation)
}
if(corData[i,]$Correlation >= minCor) {
count <- count +1
if(!dir.exists(paste0(classAtractors,"/",classe)))
dir.create(paste0(classAtractors,"/",classe))
file.copy(from = paste0("./index/", corData[i,]$Filename, ".idx"),
to = paste0(classAtractors,"/",classe),
overwrite = TRUE)
printf("%s %f >",corData[i,]$Filename,corData[i,]$Correlation)
}
printf <- function(...) invisible(print(sprintf(...)))
for(i in 1:length(corData$Filename)) {
if(i > maxFiles)
break
if(corData[i,]$Correlation >= minCor) {
count <- count +1
if(!dir.exists(paste0(classAtractors,"/",classe)))
dir.create(paste0(classAtractors,"/",classe))
file.copy(from = paste0("./index/", corData[i,]$Filename, ".idx"),
to = paste0(classAtractors,"/",classe),
overwrite = TRUE)
printf("%s %f >",corData[i,]$Filename,corData[i,]$Correlation)
}
#else
#printf("%s %f X",corData[myFile,]$Filename,corData[myFile,]$Correlation)
}
source('D:/Data Science/r/aTribunaDev/classifying.R')
showAtractors()
source('D:/Data Science/r/aTribunaDev/classifying.R')
showAtractors()
showAtractors(20)
setwd("D:/Data Science/ParallelCoordinates")
